@page "/register"
@using Minitwit.Entities
@using System.ComponentModel.DataAnnotations
@using System.Net
@inject IUtilViewModel UtilViewModel
@inject IAuthenticationCallApi AuthenticationCallApi
@inject NavigationManager NavigationManager

<title>Sign Up</title>

<h2>Sign Up</h2>
<EditForm Model="submittedUser" OnValidSubmit=OnValidSubmit>
     <DataAnnotationsValidator />
    <dl>
        <dt>Username:</dt>
        <dd>
            <InputText @bind-Value="submittedUser.Username" />
            <ValidationMessage For="@(() => submittedUser.Username)" />
        </dd>
        <dt>E-Mail:</dt>
        <dd>
            <InputText @bind-Value="submittedUser.Email" />
            <ValidationMessage For="@(() => submittedUser.Email)" />
        </dd>
        <dt>Password:</dt>
        <dd>
            <InputText type="password" @bind-Value="submittedUser.Password" />
            <ValidationMessage For="@(() => submittedUser.Password)" />
        </dd>
        <dt>Password <small>(repeat)</small>:</dt>
        <dd>
            <InputText type="password" @bind-Value="submittedUser.PasswordValidation" />
            <ValidationMessage For="@(() => submittedUser.PasswordValidation)" />
        </dd>
    </dl>
    <div class=actions><input type=submit value="Sign Up" /></div>
</EditForm>

@code {
    public class SubmittedUser
    {
        [Required]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password), ErrorMessage = "Password didn't match, try again")]
        public string PasswordValidation { get; set; }
    }

    private SubmittedUser submittedUser = new SubmittedUser();

    private async Task OnValidSubmit() 
    {
        var responseStatusCode = await AuthenticationCallApi.SignUp(submittedUser.Username, submittedUser.Email, submittedUser.Password);

        if (responseStatusCode == HttpStatusCode.OK)
        {
            UtilViewModel.FlashedMessages = null;
            NavigationManager.NavigateTo("login");
        }
        else
        {   
            var isEmailValid = AuthenticationCallApi.ValidateEmail(submittedUser.Email);
            var isPasswordValid = AuthenticationCallApi.ValidatePassword(submittedUser.Password);

            if (!isEmailValid)
                UtilViewModel.FlashedMessages = new []{ "That is not a valid email Address" }; 
            else if (!isPasswordValid)
                UtilViewModel.FlashedMessages = new []{ AuthenticationCallApi.GeneratePasswardValidationErrorMessage(submittedUser.Password)};
            else
                UtilViewModel.FlashedMessages = new []{ "User already exists" }; /*"Something went wrong, please try again"*/  

            NavigationManager.NavigateTo("register");
        }

    }
}